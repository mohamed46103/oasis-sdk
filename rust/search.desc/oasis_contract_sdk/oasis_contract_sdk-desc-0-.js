searchState.loadedDescShard("oasis_contract_sdk", 0, "Oasis Contract SDK.\nDerives the <code>Error</code> trait on an enum.\nDerives the <code>Event</code> trait on an enum.\nContract execution context.\nThe contract trait.\nSmart contract environment query interface.\nContract error trait.\nContract event trait.\nMemory management.\nSmart contract storage interface.\nUtilities for testing smart contracts.\nThe confidential store.\nExecution context.\nThe environment.\nThe public store.\nCall format.\nCaller address.\nConfidential contract store.\nTokens deposited by the caller.\nEmits an event.\nEmits a message.\nEnvironment.\nContract instance address.\nContract instance identifier.\nWhether the call is read-only and must not make any …\nPublic contract store.\nTrait that needs to be implemented by contract …\nType of all errors.\nType of all requests.\nType of all responses.\nCall the contract.\nHandle replies from sent messages.\nInstantiate the contract.\nPerform any post-upgrade tasks. This method is called on …\nPerform any pre-upgrade tasks. This method is called on …\nQuery the contract.\nCrypto helpers trait.\nErrors that can be returned from crypto functions.\nEnvironment query trait.\nReturns an address for the contract instance id.\nPrints a message to the console. Useful when debugging.\nDecrypt and authenticate a message and authenticate …\nEncrypt and authenticate a message and authenticate …\nECDSA public key recovery function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPerform an environment query.\nFills <code>dst</code> with cryptographically secure random bytes. …\nVerify an ed25519 message signature.\nVerify a secp256k1 message signature.\nVerify an sr25519 message signature.\nDerive a symmetric key from a public/private key pair.\nA contract error that gets propagated to the caller.\nError code uniquely identifying the error.\nName of the module that emitted the error.\nConverts the error into an execution result.\nAn event emitted by the contract.\nCode uniquely identifying the event.\nConverts an event into the raw event type that can be …\nName of the module that emitted the event.\nA region of memory managed on behalf of the host.\nReference to a host region.\nAllocate memory on host’s behalf.\nDeallocate memory on host’s behalf.\nReturns a new region by dereferencing a pointer to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new host region from arguments.\nCreates a new host region from arguments.\nCreates a new host region from the given byte slice.\nTransfers ownership of memory to the host by constructing …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransfers ownership of memory from the host and returns …\nMarker trait for stores backed by confidential storage.\nMarker trait for stores backed by public storage.\nKey/value store trait.\nFetch a given key from contract storage.\nInsert a given key/value pair into contract storage.\nRemove a given key from contract storage.\nA mock contract context suitable for testing.\nMock environment.\nMock store.\n“Confidential” store.\nExecution context.\nEnvironment.\nEmitted events.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEmitted messages.\nCreate a new empty mock store.\nCreate a new mock environment.\nPublic store.")